/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        int ht = height(root);
        vector<vector<int>> v(ht);
        if(root == nullptr){
            return v;
        }queue<pair<TreeNode*,int>> q;
        q.push({root,0});
        while(!q.empty()){
            TreeNode* node = q.front().first;
            int lev = q.front().second;
            q.pop();
            v[lev].push_back(node->val);
            if(node->left != nullptr){
                q.push({node->left, lev+1});
            }if(node->right != nullptr){
                q.push({node->right, lev+1});
            }
        }if(v.size() <= 1){
            v = v;
        }else{
            for(int i=1; i < v.size(); i = i+2){
                v[i] = reverse(v[i]);
            }
        }return v;
    }int height(TreeNode* root){
        if(root == nullptr){
            return 0;
        }int i = height(root->left)+1;
        int j = height(root->right)+1;
        return max(i,j);
    }vector<int> reverse(vector<int> v){
        int i = 0;
        int j = v.size()-1;
        while(i<j){
            int temp = v[i];
            v[i] = v[j];
            v[j] = temp;
            i++;
            j--;
        }return v;
    }
};