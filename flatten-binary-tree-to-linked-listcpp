/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        if(root == nullptr){
            return ;
        }vector<int> vec;
        traverse(root, vec);
        root->left = nullptr;
        TreeNode* temp = root;
        for(int i = 1; i< vec.size(); i++){
            temp->right = new TreeNode(vec[i]);
            temp = temp->right;
        }
    }void traverse(TreeNode* root, vector<int>& v){
        if(root == nullptr){
            return;
        }v.push_back(root->val);
        traverse(root->left, v);
        traverse(root->right, v);
    }
};